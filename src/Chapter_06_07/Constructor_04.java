package Chapter_06_07;

public class Constructor_04 {

	public static void main(String[] args) {

		
		// 필드 초기화
		
		// 클래스롭터 객체가 생성될 때 필드는 기본 초기값으로 자동 설정된다.
		// 만약 다른 값으로 초기화를 하고 싶다면 두 가지 방법이 있다.
		// 하나는 필드를 선언할 때 초기값을 주는 방법이고, 또 다른 하나는 생성자에서 초기값을 주는 방법이다.
		// 필드를 선언할 떄 초기값을 주게 되면 동일한 클래스로부터 생성되는 객체들을 모두 같은 데이터를 갖게 된다.
		// 물론 객체 생성 후 변경할 수 있지만, 객체 생성시점에서는 필드의 값이 모두 같다. 예를들어 다음과 같이 Korea 클래스에 nation 필드를 선언하면서
		// 대한민국으로 초기값을 준 경우, Korean 클래스로 부터 k1과 k2 객체를 생성하면 k1과 k2객체의 nation 필드에는 모두 대한민국으로 저장되어 있다.
		
		// ex
		
		// public class Korean{
		// String nation = "대한민국";
		// String name;
		// ssn;
		// }

		// korean k1 = new Korean();
		// korean k2 = new Korean();
		
		// 하지만 객체 생성 시점에 외부에서 제공되는 다양한 값들로 초기화 되어야 한다면 생성자에서 초기화를 해야한다.
		// 위 코드에서 name(이름)과 ssn(주민번호) 필드값은 클래스를 작성할 때 초기값을 줄 수 없고 객체 생성 시점에 다양한 값을 가져야 한다.
		// 따라서 생성자의 매개값으로 이 값들을 받아 초기화하는것이 맞다.
		
		
		// Korean 생성자의 매개 변수 이름은 각각 n과 s를 사용했다.
		// 매개 변수의 이름이 너무 짧으면 코드의 기독성이 좋지 않기 때문에 가능하면 초기화 시킬 필드 이름과 비슷하거나 동일한 이름을 사용할 것을 권한다.
		// 관례적으로 필드와 동일한 이름을 갖는 매개 변수를 사용한다.
		// 이 경우 필드와 매개변수 이름이 동일하기 때문에 생성자 내부에서 해당 필드에 접근할 수 없다.
		// 왜냐하면 동일한 이름의 매개 변수가 사용 우선순위가 높기 떄문이다.
		// 해결 방법은 필드 앞에 this.를 붙이면 된다.
		// this는 객체 자신의 참조인데, 우리가 우리 자신을 나라고 하듯이 객체가 객체 자신을 this라고한다.
		// this.필드는 this라는 참조 변수로 필드를 사용하는 것ㄷ과 동일하다. this를 이용하여 Korean 생성자를 수정하면 다음과 같다.
		
		
//		public Korean(String name, String ssn) {
//			this.name = name;
//			this.ssn = ssn;
//		}
		
		// 객체의 필드는 하나가 아니라 여러 개가 있고, 이 필드들은 모두 생성자에서 초기화 한다면 생성자의 매개 변수의 수는 객체의 필드 수만큼 선언되어야한다.
		// 그러나 실제로는 중요한 몇 개 필드만 매개변수를 통해 초기화되고 나머지 필드들은 필드 선언 시에 초기화 하거나 생성자 내부에서 임의의 값 또는 계산된 값으로 초기화한다.
		// 아니면 객체 생성 후에 필드값을 별도로 저장하기도 한다.
		
		
	
	
	}

}
