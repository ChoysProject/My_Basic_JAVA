package Chapter_05_06;

public class Arrangement_Type_01 {

	public static void main(String[] args) {

		// 배열이란 ?
		
		// 변수는 한 개의 데이터만 저장할 수 있다. 따라서 저장해야 할 데이터의 수가 많아지면 그만큼 만은 변수가 필요하다.
		// 예를 들어 학생 30명의 성적을 저장하고, 평균값을 구한다고 가정해보자.
		// 먼저 학생 30명의 성적을 저장하기 위한 변수 30개를 선언해야한다.
		
		// int score1 = 53;
		// int score2 = 56;
		// int score3 = 76; 
		// 등등 ----
		
		// 그리고 평점을 구하기 위해 변수들을 모두 더해야 한다.
		
		// int sum = score1;
		// sum += score2;
		// sum += socre3;
		// int avg = sum / 30;
		
		// 위와 같은 방법은 매우 비효율적이고 지루한 코딩이 된다. 만약 전교 학생들에 대한 성적을 처리할 경우 수백개의 변수 선언으로 인해 코드는 끔찍해진다.
		// 같은 타입의 많은 양의 데이터를 다루는 프로그램에서는 좀 더 효율적인 방법이 필요한데, 이것이 배열이다.
		// 배열은 같은 타입의 데이터를 연속된 공간에 나열시키고, 각 데이터에 인덱스(index)를 부여해 놓은 자료구조이다.
		
		
		// page 150 참고
		// score 배열의 각 인덱스는 각 항목의 데이터를 읽거나, 저장하는데 사용되며 다음과 같이 배열 이름옆에 대괄호[]에 기입된다.
		
		// score[index]
		
		// 예를 들어 score[0]은 83, score[1]은 90, score[2]는 87 값을 가진다. 이렇게 성적을 배열로 만들면 성적의 평균값은 배열의 인덱스를 이용해서 for문으로 쉽게 구할 수 있다.
		
//		int sum = 0;
//		
//		for(int i = 0 ; i<30 ; i++) {
//			sum += score[i];
//		}
//		int avg = sum / 30;
		
		
		// for문이 30번 반복 실행하면서 i가 0~29까지 변한다. 따라서 sum 변수에는 score[0] ~ score[29]까지 더해지고, 마지막으로 얻은 sum을 30으로 나누어 평균 avg를 얻는다.
		// 학생수가 30명이 아니라 수백 명이 되어도 for문의 i<30만 변경하면 되므로 많은 양의 데이터를 적은 코드로 손쉽게 처리할 수 있다.
		// 배열은 같은 타입의 데이터만 저장할 수 있다. int 배열은 int 값만 저장 가능하고, String 배열은 문자열만 저장 가능하다. 
		// 배열은 선언과 동시에 저장할 수 있는 데이터 타입이 결정된다.
		// 만약 다른 타입의 값을 저장하려고 하면 타입 불일치 컴파일 오류가 발생한다.
		// 배열의 또 다른 특징은 한 번 생성된 배열은 길이를 늘리거나 줄일 수 없다.
		// 3개의 값을 저장하는 배열을 생성했다고 가정하자. 프로그램 실행 도중에 5개의 값을 저장하는 배열로 수정할 수 없고, 반대로 2개의 값만 저장하는 배열로 수정할 수도 없다.
		// 만약 5개의 값을 저장해야 하는 경우가 발생한다면 , 길이 5의 새로운 배열을 생성하고, 기존 배열 항목을 새 배열로 복사한다.
		
		
	}

}
