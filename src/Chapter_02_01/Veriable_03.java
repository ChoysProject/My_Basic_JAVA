package Chapter_02_01;

public class Veriable_03 {

	
	public static void main(String[] args) {
		
		// 변수의 사용 
		// 변수의 값을 저장할 떄에는 대입 연산자(=)를 사용
		
		int score; // 변수선언
		score = 90; // 값 저장
		
		// 초기값은 변수를 선언함과 동시에 줄 수도 있다.
		
		int scores = 90;
		
		// 변수의 초기값은 코드에서 직접 입력하는 경우가 많은데, 소스 코드 내에서 직접 입력된 값을 리터럴(literal)이라고 부른다.
		
		// 정수 리터럴
		// 소수점이 없는 정수 리터럴은 10진수로 간주한다.
		// 0, 75, -100
		
		// 0으로 시작되는 리터럴은 8진수로 간주한다.
		// 02, -04
		
		// 0x 또는 0X로 시작하고 0~9 숫자나 A,B,C,D,E,F 또는 a,b,c,d,e,f로 구성된 리터럴은 16진수로 간주한다.
		// 0x5, 0xA, 0xB3, 0xAC08
		// 정수 리터럴을 저장할 수 있는 타입은 byte, char, short, int, long과 같이 5개가 있다. 
		
		// 실수 리터럴
		// 0.25, -3.14
		
		// 대문자 E또는 소문자 e가 있는 리터럴은 10진수 지수와 가수로 간주한다.
		// 5E7   //5 x 10
		// 0.12E-5 // 0.12 x 10
		// 실수 리터럴은 float, double
		
		// 문자 리터럴
		// 작은 따옴표(')로 묶은 텍스트는 하나의 문자 리터럴로 간주한다.
		// 'A', '한', '\t', '\n'
		// 역슬래시 (\)가 붙은 문자 리터럴은 이스케이프(escape) 문자라고도 하는데, 다음과 같이 특수한 용도로 사용함
		
		// 이스케이프 문자			용도					유니코드
		// '\t'				    수평탭 				0x0009
		// '\n'				    줄바꿈				0x000a
		// '\r'					리턴					0x000d
		// '\"'				  "(큰따옴표)				0x0022
		// '\\'					  \ 				0x005c
		// 'u16진수'		 16진수에 해당하는 유니코드 		0x0000 ~ 0xffff
		
		// 문자 리터럴을 할 수 있는 타입은 char 하나 뿐이다.
		
		// 문자열 리터럴
		// 큰따옴표(")로 묶은 텍스트는 문자열 리터럴로 간주한다.
		// 큰 따옴표 안에는 텍스트가 없어도 문자열을 리터럴로 간주된다.
		// 문자열 내부에서도 이스케이프 문자를 사용할 수 있다.
		// "대한민국", "탭 만큼 이동t 합니다.", "한줄 내려 쓰기 \n 합니다."
		// 문자열 리터럴을 저장할 수 있는 타입은 String 하나 뿐이다.
		
		// 논리 리터럴
		// true와 false는 논리 리터럴이다.
		// true, false
		// 논리 리터럴을 저장 할 수 있는 타입은 boolean 하나 뿐이다.
		
		// 변수값 읽기
		// 변수는 초기화가 되어야 읽을 수가 있고, 초기화 되지 않은 변수는 읽을 수가 없다, 다음은 잘못된 코딩 예를 보여준다.
		
//		int value; // 변수 value 선언 (초기화 안 됨)
//		int result = value + 10; // 변수 value 값을 읽고 10을 더한 결과값을 변수 result에 저장.
		
		// 변수 value가 선언되었지만, 초기화가 되지 않았기 떄문에 산술 연산식 value + 10에서 사용할 수 없다
		// 다음과 같이 수정이 필요하다.
		
		int value = 30; // 변수 value = 30으로 초기화됨
		int result = value + 10; // 변수 value 값을 읽고 10을 더한 결과값 40을 변수 result에 저장
		
		
	}
	
}
