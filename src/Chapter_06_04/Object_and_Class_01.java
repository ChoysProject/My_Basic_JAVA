package Chapter_06_04;

public class Object_and_Class_01 {

	public static void main(String[] args) {

		// 객체 생성과 클래스 변수
		
		// 클래스를 선언한 다음, 컴파일을 했다면 (이클리스에서는 저장) 객체를 생성할 설ㅇ계도가 만들어진 셈이다.
		// 클래스로부터 객체를 생성하는 방법은 다음과 같이 new 연산자를 사용하면 된다.
		
//		new 클래스();
		
		// new는 클래스로부터 객체를 생성시키는 연산자이다.
		// new 연산자 뒤에는 생성자가 오는데 생성자는 클래스() 형태를 가지고 있다.
		// new 연산자로 생성된 객체는 메모리 힙(heap) 영역에 생성된다.
		// 현실 세계에서 물건의 위치를 모르면 물건을 사용할 수 없듯이, 객체 지향 프로그램에서도 메모리 내에서 생성된 객체의 위치를 모르면 객체를 사용할 수 없다.
		// 그래서 new 연산자는 힙 영역에 객체를 생성시킨 후, 객체의 주소를 리턴하도록 되어있다.
		// 이 주소를 참조 타입인 클래스 변수에 저장해 두면, 변수를 통해 객체를 사용할 수 있다.
		// 다음은 클래스 타입으로 선언된 변수에 new 연산자가 리턴한 객체의 주소로 저장하는 코드이다.
		
		// 클래스 변수
		// 변수 = new 클래스();
		
		// 클래스 변수 선언과 객체 생성을 한 개의 실행문으로 작성할 수도 있다.
		// 클래스 변수 = new 클래스();
		
		// 이렇게 new 연산자로 객체를 생성하고 리턴된 객체의 주소를 변수에 저장하면 다음 그림과 같이 변수가 객체를 참조하게 된다.
		// page 194 참고
		
		// 클래스 선언에서부터 생성까지 예제를 통해 익혀보자.
		
		// 다음 예제는 Student 클래스를 선언하고 StudentExample 클래스의 main() 메소드에서 Student 객체를 생성한다.
		
		// Example 참고
		
		// 예제가 실행되면 다음 그림과 같이 메모리에 클래스 변수와 객체가 생성된다.
		// 클래스는 하나지만 new 연산자를 사용한 만큼 객체가 메모리에 ㅅㅇ성된다.
		// 이러한 객체들은 클래스의 인스턴스 들이다.
		// 비록 같은 클래스로부터 생성되지만 각각의 클래스 객체는 자신만의 고유 데이터를 가지면서 메모리에서 활동하게 된다.
		// test1, test2가 참조하는 객체는 완전히 독립된 서로 다른 객체이다.
		
		// 여기서 우리는 클래스와 example 클래스의 용도에 대해 알아볼 필요가 있다.
		// 클래스는 두가지 용도가 있다.
		// 하나는 라이브러리(api) 용이고 다른 하나는 실행 용이다.
		// 라이브러리 클래스는 다른 클래스에서 이용할 목적으로 설계된다.
		// 프로그램 전체에서 사용되는 클래스가 100개라면 99개는 라이브러리이고 단 하나가 실행 클래스이다.
		// 실행 클래스는 프로그램의 실행 진입점인 main() 메소드를 제공하는 역할을 한다.
		// 클래스는 라이브러리 클래스이고 example은 실행 클래스이다. 클래스의 에인 메소드를 작성해서 라이브러리인 동시에 실행 클래스로 만들 수도 있다.
		
		// 프로그램 단 하나의 클래스로 구성된다면 위와 같이 작성하는 것이 좋은 방법일 수 있지만, 대부분의 객체 지향 프로그램은 라이브러리와 실행 클래스가 분리되어 있다.
		// 그래서 이 책에서는 가급적이면 다소 지면이 소요되더라도 각 예제에서 두 클래스를 분리해서 작성 할 것이다.
		
		
		
		
	}

}
