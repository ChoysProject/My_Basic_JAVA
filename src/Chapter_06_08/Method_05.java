package Chapter_06_08;

public class Method_05 {

	public static void main(String[] args) {

		//메소드 오버로딩
		
		// 클래스 내에 같은 이름의 메소드를 여러 개 선언하는 것을 메소드 오버로딩 이라고 한다.
		// 오버로딩의 사전적 의미는 많이 싣는 것을 뜻한다.
		// 하나의 메소드 이름으로 여러 기능을 담는다. 하여 붙여진 이름이라 생각할 수 있다.
		// 메소드 오버로딩의 조건은 매개 변수의 타입, 개수, 순서 중 하나가 달라야 한다.
		
		// 메소드 오버로딩이 필요한 이유는 매개값을 다양하게 받아 처리할 수 있도록 하기 위해서이다.
		// 예를 들어 다음가 같이 plus() 메소드가 있다고 가정해보자
		
//		int plus (int x, int y) {
//			int result = x+y;
//			return result;
//		}
	
		// plus() 메소드를 호출하기 위해서는 두 개의 int 매개값이 필요하다.
		// 하지만 int 타입이 아니라 double 타입의 값을 덧셈하기 위해서는 plus() 메소드를 호출할 수 없다.
		// 해결 방법은 매개 변수가 double 타입으로 선언된 plus() 메소드를 하나 더 선언하는 것이다.
		
//		double plus(double x, double y) {
//			double result = x+y;
//			return result;
//		}
	
		// 오버로딩된 메서드를 호출할 경우 JVM은 매개값이 타입을 보고 메소드를 선택한다.
		// 예를 들어 다음과 같이 PLUS() 메소드를 호출하면 plus(int x, int y)가 실행된다.
		
		// 그리고 다음과 같이 plus() 메소드를 호출하면 plus(double x, double y)가 실행된다.
		
		// plus(10.5, 20.3);
		
		// 그렇다면 다음 코드는 어떻게 될까? 컴파일 오류가 날까? 만일 실행이 된다면 어떤 메소드가 실행될까?
		
//		int x = 10;
//		double y = 20.3;
//		plus(x,y);
		
		// 첫 번째 매개 변수가 int 타입이고 두 번째 매개 변수가 double 타입인 plus() 메소드가 없기 떄문에 컴파일 오류가 날 것 같지만. 사실은 plus(double x, double y) 메소드가 실행된다.
		// 자바 가상 기계는 일차적으로 매개 변수 타입을 보지만, 매개 변수의 타입이 일치하지 않을 경우, 자동 타입 변환이 가능한지를 검사한다.
		// 첫 번째 매개 변수인 int 타입은 double 타입으로 변환이 가능하므로 최종적으로 plus(double x, double y) 메소드가 선택된다.
		// 메소드를 오버로딩할 때 주의할 점은 매개 변수의 타입과 개수, 순서가 똑같을 경우 매개 변수 이름만 바꾸는 것은 메소드 오버로딩이라고 볼 수 없다.
		// 또한 리턴 타입만 다르고 매개 변수가 동일하다면 이것은 오버로딩이 아니다.
		// 왜냐하면 리턴 타입은 자바 가상 기계가 메소드를 선택할 떄 아무런 도움을 주지 못하기 떄문이다.
		// 만약 아래와 같이 선언했다면 오버로딩이 아니기 떄문에 컴파일 오류가 발생한다.
		
		// 메소드 오버로딩의 가장 대표적인 예는 System.out.println() 메소드이다. printLn() 메소드는 호출할 떄 주어진 매개값의 타입에 따라서 오버로딩 된 프린트 메소드를 호출한다.
		// 다음은 오버로딩 된 println() 메소드를 보여준다.
		
		// 다음 예제를 보면 Calculaotr 클래스에 areaRectangle() 메소드를 오버로딩해서 매개값이 한 개 면 정사각형의 넓이를, 두 개 이면 직사각형의 넓이를 계산하여 리턴하도록 했다.
		// 어떤 메소드가 호출될 것인지는 매개값의 수에 달려있다.
		
		
		
	}
}
