package Chapter_06_08;

public class Method_04 {

	public static void main(String[] args) {

		// 메소드 호출
		
		// 메소드는 클래스 내 외부의 호출에 의해 실행된다.
		// 클래스 내부의 다른 메소드에서 호출할 경우에는 단순한 메소드 이름으로 호출하면 되지만, 클래스 외부에서 호출할 경우에는 우선 클래스로부터 객체를 생성한뒤,
		// 참조변수를 이용해서 메소드를 호출해야한다.
		// 그 이유는 객체가 존재해야 메소드도 존재하기 때문이다.
		
		// 객체 내부에서 호출
		// 클래스 내부에서 다른 메소드를 호출할 경우에는 다음과 같은 형태로 작성하면 된다.
		// 메소드가 매개변수를 가지고 있을 떄에는 매개 변수의 타입과 수에 맞게 매개값을 제공한다.
		
		// 예를 들어 method2() 메소드에서 method1() 메소드를 호출하려면 다음과 같이 작성하면 된다.
		// 1 호출에서 method1("홍길동", 100)이 호출되면 매개값인 "홍길동"은 p1 매개 변수에 대입되고 100은 p2 매개변수에 대입된다.
		// 그리고 2실행에서 p1과 p2변수를 이용하게 된다.
		
		// 메소드가 리턴값이 없거나, 있어도 받고 싶지 않을 경우 위와 같이 모두 호출이 가능하다.
		// 리턴값이 있는 메소드를 호출하고 리턴값을 받고 싶다면 다음과 같이 변수를 선언하고 대입하면 된다.
		
		// 주의해야 할 점은 변수 타입은 메소드 리턴 타입과 동일하거나, 타입 변환이 될 수 있어야 한다.
		// 예를 들어 int 타입은 double 타입으로 자동 변환되기 때문에 int 리턴값은 double 변수에 대입할 수 있다.
		
		// CalculatorExample 클래스의 4라인에서 caluclator 객체의 execute() 메소드를 호출하면 14라인에서 1이 호출이 제일 먼저 일어나서
		// avg() 메소드가 실행된다.
		// 그리고 avg() 메소드가 8라인에서 2호출이 일어나서 plus() 메소드가 실행된다.
		// plis () 메소드가 리턴값을 주면 avg()메소드는 8라인에서 리턴값을 sum 변수에 저장하고 9라인을 실행한 후 10라인에서 execute() 메서드로 리턴값을 준다.
		// execute() 메소드는 14라인에서 avg() 메소드의 리턴값을 받아 15라인에서 메서드를 호출할 때 매개값으로 넘겨준다.
		// printin() 메소드는 매개값으로 받은 문자열을 19라인에서 콘솔로 출력한다.
		// 마지막으로 execite() 메소드는 16라인을 만나게 되고 종료된다.
		
		// 객체 외부에서 호출
		
		// 외부 클래스에서 메소드를 호출하려면 우선 다음과 같이 클래스로부터 객체를 생성해야 한다.
		// 메소드는 객체에 소속된 멤버이므로 객체가 존재하지 않으면 메소드도 존재하지 않기 때문이다.
		
		// 객체가 생성되었다면 참조 변수와 함꼐 도트(.) 연산자를 사용해서 메소드를 호출할 수 있다.
		// 도트 연산자는 객체 접근 연산자로 객체가 가지고 있는 필드나, 메소드에 접근할 때 사용된다.
		
		// 다음은 car객체의 keyTurnOn() 메소드와 run() 메소드를 호출하는 코드이다. keyTurnOn()과 run() 메소드는 리턴값이 없기 때문에 단순 호출만 했고,
		// getSpeed() 메소드는 리턴값이 있으므로 리턴값을 받아 변수 speed에 저장했다.
		
//		Car myCar = new Car();
//		myCar.keyTurnOn();
//		myCar.run();
//		int speed = myCar.getSpeed();
		
	}

}
